// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User{
  id String @id 
  email String
  firstName String
  lastName String
  imageUrl String?
  userName String? @unique
  createdSubreddits Subreddit[]
  
  createdAt DateTime @default(now())
  Vote Vote[]

  Comment Comment[]

  posts Post[]

}

model Subreddit {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  imageString String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User?     @relation(fields: [userId], references: [id])
  userId      String?
  posts       Post[]
}

model Post {
  id String @id @default(uuid())
  title String
  textContent Json?
  imageString String?

  Vote Vote[]
  Comment Comment[]

  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt
  Subreddit Subreddit? @relation(fields: [subName], references: [name])
  subName String?
  User User? @relation(fields: [userId], references: [id])
  userId String?

}

enum TypeofVote{
  UP 
  DOWN 
}
model Vote {
  id String @id @default(uuid())

  Post Post? @relation(fields: [postId], references: [id])
  postId String?
  User User? @relation(fields: [userId], references: [id])
  userId String?

  voteType TypeofVote
}

model Comment {
  id String @id @default(uuid())
  text String
  createdAT DateTime @default(now())

  User User? @relation(fields: [userId], references: [id])
  userId String?
  Post Post? @relation(fields: [postId], references: [id])
  postId String?

}